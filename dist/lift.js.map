{"version":3,"sources":["../src/lift.js"],"names":["isFunction","func","constructor","call","apply","idFunction","value","isNone","undefined","Curry","args","length","bind","Monad","modifier","prototype","Object","create","is_monad","unit","monad","run","of","m","fold","chain","map","join","toMaybe","Maybe","name","lift","l","liftValue","lv","method","Just","valueIsNone","isNothing","n","is","or","orValue","else","orMonad","validFunctions","success","s","successFactory","fail","f","failFactory","isSuccess","isSuccessValue","isFail","ap","validationWithFn","fn","concat","Success","Fail","Valid","IO"],"mappings":"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","file":"lift.js","sourcesContent":["const isFunction =\n  func =>\n    !!(func && func.constructor && func.call && func.apply)\n\nconst idFunction =\n  value =>\n    value\n\nconst isNone =\n  value =>\n    value === null || value === undefined\n\nexport const Curry =\n  (func, ...args) =>\n    (args.length >= func.length ? func(...args) : Curry.bind(this, func, ...args))\n\nexport const Monad = (modifier) => {\n  const prototype = Object.create({ is_monad: true })\n  const unit = (value) => {\n    const monad = Object.create(prototype)\n\n    const run = (value, func, args) => (isFunction(func) ? func(value, ...(args || [])) : monad)\n    prototype.bind = (func, args) => run(value, func, args)\n\n    monad.of = (value) => {\n      const m = run(value, idFunction)\n      return m && m.is_monad ? m : unit(m)\n    }\n    monad.fold = () => value\n    monad.chain = monad.bind\n    monad.map = func => unit(func(value))\n    monad.join = () => monad.bind(idFunction)\n    monad.toMaybe = () => Maybe(value)\n    monad.run = func => (run(value, func), monad)\n\n    if (isFunction(modifier)) {\n      modifier(monad, value)\n    }\n    return monad\n  }\n\n  const apply = (prototype, name, func, unit) => {\n    prototype[name] = func\n    return unit\n  }\n\n  unit.lift = unit.l = (name, func) => apply(prototype, name, (...args) => {\n    const m = prototype.bind(func, args)\n    return (m && m.is_monad) ? m : unit(m)\n  }, unit)\n\n  unit.liftValue = unit.lv = (name, func) =>\n    apply(prototype, name, (...args) => prototype.bind(func, args), unit)\n\n  unit.method = unit.m = (name, func) =>\n    apply(prototype, name, func, unit)\n\n  return unit\n}\n\nexport const Just = Monad()\n\nexport const Maybe = Monad((monad, value) => {\n  const valueIsNone = isNone(value)\n  monad.isNothing = monad.n = () => valueIsNone\n  monad.is = () => !valueIsNone\n  monad.or = orValue => (valueIsNone ? orValue : value)\n  monad.else = orMonad => (valueIsNone ? orMonad : monad)\n  monad.bind = valueIsNone ? () => monad : monad.bind\n  monad.map = valueIsNone ? () => monad : monad.map\n  const run = monad.run\n  monad.run = func => ((valueIsNone ? () => { } : run)(value, func), monad)\n})\n\nconst validFunctions = (monad, value) => {\n  monad.success = monad.s = successFactory\n  monad.fail = monad.f = failFactory\n  monad.isSuccess = () => monad.isSuccessValue\n  monad.isFail = () => !monad.isSuccessValue\n  monad.ap =\n    validationWithFn =>\n      (monad.isSuccess() ? // eslint-disable-line\n        validationWithFn.map(fn => fn(value)) :\n        (validationWithFn.isFail() ?\n          monad.fail([].concat(value, validationWithFn.fail()))\n          : monad))\n}\n\nconst Success = Monad((monad, value) => {\n  monad.isSuccessValue = true\n  validFunctions(monad, value)\n})\n\nconst Fail = Monad((monad, value) => {\n  monad.isSuccessValue = false\n  validFunctions(monad, value)\n})\n\nconst successFactory = value => Success(value)\nconst failFactory = value => Fail(value)\n\nexport const Valid = Monad((monad, value) => {\n  validFunctions(monad, value)\n})\n\nValid.success = Valid.s = successFactory\nValid.fail = Valid.f = failFactory\n\nexport const IO =\n  func =>\n    (...args) =>\n      Monad((monad, value) => {\n        monad.run = () => value(...args)\n      })(func)\n\n"]}