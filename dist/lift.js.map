{"version":3,"sources":["../src/lift.js"],"names":["isFunction","func","constructor","call","apply","idFunction","value","isNone","undefined","Curry","args","length","bind","Monad","modifier","prototype","Object","create","is_monad","unit","monad","run","of","m","get","g","chain","c","map","join","j","toMaybe","Maybe","r","name","lift","l","liftValue","lv","method","Just","valueIsNone","isNothing","n","is","i","or","o","orValue","else","e","orMonad","validFunctions","success","s","successFactory","fail","f","failFactory","isSuccess","isSuccessValue","isFail","ap","validationWithFn","fn","concat","Success","Fail","Valid","IO"],"mappings":"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","file":"lift.js","sourcesContent":["const isFunction =\n  func =>\n    !!(func && func.constructor && func.call && func.apply);\n\nconst idFunction =\n  value =>\n    value;\n\nconst isNone =\n  value =>\n    value === null || value === undefined;\n\nexport const Curry =\n  (func, ...args) =>\n    (args.length >= func.length ? func(...args) : Curry.bind(this, func, ...args));\n\nexport const Monad = (modifier) => {\n  const prototype = Object.create({ is_monad: true });\n  const unit = (value) => {\n    const monad = Object.create(prototype);\n\n    const run = (value, func, args) => (isFunction(func) ? func(value, ...(args || [])) : monad);\n    prototype.bind = (func, args) => run(value, func, args);\n\n    monad.of = (value) => {\n      const m = run(value, idFunction);\n      return m && m.is_monad ? m : unit(m);\n    };\n    monad.get = monad.g = () => value;\n    monad.chain = monad.c = monad.bind;\n    monad.map = monad.m = func => unit(func(value));\n    monad.join = monad.j = () => monad.bind(idFunction);\n    monad.toMaybe = () => Maybe(value);\n    monad.run = monad.r = (func) => { run(value, func); return monad; };\n\n    if (isFunction(modifier)) {\n      modifier(monad, value);\n    }\n    return monad;\n  };\n\n  const apply = (prototype, name, func, unit) => {\n    prototype[name] = func;\n    return unit;\n  };\n\n  unit.lift = unit.l = (name, func) => apply(prototype, name, (...args) => {\n    const m = prototype.bind(func, args);\n    return (m && m.is_monad) ? m : unit(m);\n  }, unit);\n\n  unit.liftValue = unit.lv = (name, func) =>\n    apply(prototype, name, (...args) => prototype.bind(func, args), unit);\n\n  unit.method = unit.m = (name, func) =>\n    apply(prototype, name, func, unit);\n\n  return unit;\n};\n\nexport const Just = Monad();\n\nexport const Maybe = Monad((monad, value) => {\n  const valueIsNone = isNone(value);\n  monad.isNothing = monad.n = () => valueIsNone;\n  monad.is = monad.i = () => !valueIsNone;\n  monad.or = monad.o = orValue => (valueIsNone ? orValue : value);\n  monad.else = monad.e = orMonad => (valueIsNone ? orMonad : monad);\n  monad.bind = valueIsNone ? () => monad : monad.bind;\n  monad.map = valueIsNone ? () => monad : monad.map;\n  const run = monad.run;\n  monad.run = (func) => { (valueIsNone ? () => { } : run)(value, func); return monad; };\n});\n\nconst validFunctions = (monad, value) => {\n  monad.success = monad.s = successFactory;\n  monad.fail = monad.f = failFactory;\n  monad.isSuccess = () => monad.isSuccessValue;\n  monad.isFail = () => !monad.isSuccessValue;\n  monad.ap =\n    validationWithFn =>\n      (monad.isSuccess() ? // eslint-disable-line\n        validationWithFn.map(fn => fn(value)) :\n        (validationWithFn.isFail() ?\n          monad.fail([].concat(value, validationWithFn.fail()))\n          : monad));\n};\n\nconst Success = Monad((monad, value) => {\n  monad.isSuccessValue = true;\n  validFunctions(monad, value);\n});\n\nconst Fail = Monad((monad, value) => {\n  monad.isSuccessValue = false;\n  validFunctions(monad, value);\n});\n\nconst successFactory = value => Success(value);\nconst failFactory = value => Fail(value);\n\nexport const Valid = Monad((monad, value) => {\n  validFunctions(monad, value);\n});\n\nValid.success = Valid.s = successFactory;\nValid.fail = Valid.f = failFactory;\n\nexport const IO =\n  func =>\n    (...args) =>\n      Monad((monad, value) => {\n        monad.run = () => value(...args);\n      })(func);\n\n"]}